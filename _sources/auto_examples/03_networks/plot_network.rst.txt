

.. _sphx_glr_auto_examples_03_networks_plot_network.py:


Basic network using networkx
============================






.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/03_networks/images/sphx_glr_plot_network_001.png
            :scale: 47

    *

      .. image:: /auto_examples/03_networks/images/sphx_glr_plot_network_002.png
            :scale: 47


.. rst-class:: sphx-glr-script-out

 Out::

    ['p2', 'p3', 'p1', 'p6', 'p7', 'p4', 'p5', 'p8', 'p9', 'p10', 'p11', 'p12', 'p13', 'p14', 'p15', 'p16', 'p17', 'p18', 'p19', 'p20'] [('p2', 'p3'), ('p2', 'p1'), ('p2', 'p6'), ('p2', 'p5'), ('p2', 'p9'), ('p2', 'p10'), ('p2', 'p11'), ('p2', 'p14'), ('p2', 'p16'), ('p2', 'p17'), ('p2', 'p18'), ('p3', 'p1'), ('p3', 'p7'), ('p3', 'p5'), ('p3', 'p8'), ('p3', 'p9'), ('p3', 'p10'), ('p3', 'p14'), ('p3', 'p17'), ('p3', 'p18'), ('p3', 'p19'), ('p1', 'p6'), ('p1', 'p4'), ('p1', 'p8'), ('p1', 'p9'), ('p1', 'p14'), ('p1', 'p16'), ('p1', 'p18'), ('p6', 'p5'), ('p6', 'p9'), ('p6', 'p10'), ('p6', 'p14'), ('p6', 'p15'), ('p6', 'p16'), ('p6', 'p18'), ('p6', 'p19'), ('p7', 'p5'), ('p7', 'p9'), ('p7', 'p14'), ('p7', 'p15'), ('p7', 'p18'), ('p4', 'p5'), ('p4', 'p9'), ('p4', 'p13'), ('p4', 'p15'), ('p4', 'p18'), ('p5', 'p8'), ('p5', 'p9'), ('p5', 'p10'), ('p5', 'p12'), ('p5', 'p14'), ('p5', 'p15'), ('p5', 'p16'), ('p5', 'p18'), ('p8', 'p9'), ('p8', 'p14'), ('p8', 'p20'), ('p8', 'p18'), ('p9', 'p11'), ('p9', 'p13'), ('p9', 'p14'), ('p9', 'p15'), ('p9', 'p16'), ('p9', 'p18'), ('p9', 'p19'), ('p10', 'p14'), ('p10', 'p16'), ('p11', 'p14'), ('p11', 'p15'), ('p11', 'p16'), ('p12', 'p18'), ('p13', 'p14'), ('p13', 'p15'), ('p13', 'p17'), ('p13', 'p18'), ('p13', 'p20'), ('p14', 'p15'), ('p14', 'p16'), ('p14', 'p17'), ('p14', 'p18'), ('p15', 'p16'), ('p15', 'p18'), ('p16', 'p17'), ('p16', 'p18')]




|


.. code-block:: python



    import networkx as nx
    import matplotlib.pyplot as plt
    import random

    G = nx.Graph()

    nodes = ["p{}".format(i) for i in range(1,21)]

    for n in nodes:
        G.add_node(n)

        if len(G.nodes())>1:
            pop = [i for i in G.nodes() if i!=n]
            sample = random.sample(pop, random.randint(1,len(pop)))

            for t in sample:
                G.add_edge(n,t)


    print(G.nodes(), G.edges())
    nx.draw(G)
    plt.show()

    plt.figure()
    dist=nx.degree(G).values()
    plt.hist(list(dist))

**Total running time of the script:** ( 0 minutes  0.353 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_network.py <plot_network.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_network.ipynb <plot_network.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
